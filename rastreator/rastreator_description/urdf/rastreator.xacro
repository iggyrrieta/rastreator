<?xml version="1.0"?>
<robot name="rastreator" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <!--**************************************************************-->
    <!--KINEMATIC GLOBAL VARIABLES-->
    <!--**************************************************************-->
    <!--base_link-->
    <xacro:property name="base_mass" value="1.0"/>
    <xacro:property name="base_width" value="0.142"/>
    <xacro:property name="base_len" value="0.2"/>
    <xacro:property name="base_height" value="0.127"/>
    <xacro:property name="plate_height" value="0.00849"/>
    <!--wheels-->
    <xacro:property name="wheel_mass" value="0.15"/>
    <xacro:property name="wheel_radius" value="0.0325"/>
    <xacro:property name="wheel_diameter" value="0.065"/>
    <xacro:property name="wheel_separation" value="0.16"/>
    <xacro:property name="wheel_height" value="0.018"/>
    <xacro:property name="wheel_x_pos" value="0.075"/>
    <xacro:property name="wheel_left_offset" value="0.004"/>
    <xacro:property name="wheel_right_offset" value="0.001"/>
    <!--front caster wheel-->
    <xacro:property name="caster_height" value="0.009"/>

    <xacro:property name="wheel_torque" value="10"/>
    <xacro:property name="wheel_acc" value="1.0"/>
    <xacro:property name="update_rate" value="30"/>
    
    <!--**************************************************************-->
    <!--MATERIAL COLOUR-->
    <!--**************************************************************-->
    <material name="dark">
      <color rgba="0.3 0.3 0.3 1.0"/>
    </material>
    <material name="black">
      <color rgba="0.0 0.0 0.0 1.0"/>
    </material>
    <material name="light_black">
      <color rgba="0.4 0.4 0.4 1.0"/>
    </material>

    <!--**************************************************************-->
    <!--INERTIAS-->
    <!--**************************************************************-->
    <!--BOX (Chassis)-->
    <xacro:macro name="box_inertia" params="m w h d">
      <inertial>
        <mass value="${m}"/>
        <inertia ixx="${m / 12.0 * (d*d + h*h)}" ixy="0.0" ixz="0.0" iyy="${m / 12.0 * (w*w + h*h)}" iyz="0.0" izz="${m / 12.0 * (w*w + d*d)}"/>
      </inertial>
    </xacro:macro>
    <!--CYLINDER (Left and Right wheel)-->
    <xacro:macro name="cylinder_inertia" params="m r h">
      <inertial>
        <mass value="${m}"/>
        <inertia ixx="${m*(3*r*r+h*h)/12}" ixy = "0" ixz = "0" iyy="${m*(3*r*r+h*h)/12}" iyz = "0" izz="${m*r*r/2}"/> 
      </inertial>
    </xacro:macro>
    <!--SPHERE (Caster wheel)-->
    <xacro:macro name="sphere_inertia" params="m r">
      <inertial>
        <mass value="${m}"/>
        <inertia ixx="${2.0*m*(r*r)/5.0}" ixy="0.0" ixz="0.0" iyy="${2.0*m*(r*r)/5.0}" iyz="0.0" izz="${2.0*m*(r*r)/5.0}"/>
      </inertial>
    </xacro:macro>

    <!--**************************************************************-->
    <!--DUMMY LINK (without inertia)-->
    <!--**************************************************************-->
    <link name="base_footprint"/>

    <!--**************************************************************-->
    <!--CHASSIS (base link)-->
    <!--**************************************************************-->
    <link name="base_link">
      <!--INERTIA-->
      <xacro:box_inertia m="${base_mass}" w="${base_width}" h="${base_height}" d="${base_len}"/>
      <!--COLLISION-->
      <collision>
        <geometry>
          <mesh filename="package://rastreator_description/mesh/rastreator_chassis.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>
      <!--VISUAL-->
      <visual>
        <geometry>
          <mesh filename="package://rastreator_description/mesh/rastreator_chassis.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="light_black"/>
      </visual>
    </link>
    <!--JOINT-->
    <joint name="base_joint" type="fixed">
      <origin xyz="0.0 0.0 ${wheel_radius-caster_height}" rpy="0 0 0"/> 
      <parent link="base_footprint"/>
      <child link="base_link" />
    </joint>

    <!--**************************************************************-->
    <!--LEFT WHEEL-->
    <!--**************************************************************-->
    <link name="left_wheel_link">
      <!--INERTIA-->
      <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_height}"/>
      <!--COLLISION-->
      <collision>
        <geometry>
          <mesh filename="package://rastreator_description/mesh/rastreator_left_wheel.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>
      <!--VISUAL-->
      <visual>
          <geometry>
            <mesh filename="package://rastreator_description/mesh/rastreator_left_wheel.stl" scale="0.001 0.001 0.001"/>
          </geometry>
          <material name="black"/>
      </visual>
    </link>
    <!--JOINT-->
    <joint name='wheel_left_joint' type='continuous'>
      <origin xyz="-${wheel_x_pos} ${(wheel_separation/2)-wheel_left_offset} ${wheel_radius-caster_height-plate_height}" rpy="0 0 0"/>
      <child  link="left_wheel_link"/>
      <parent link="base_link"/>
      <axis rpy="0 0 0" xyz="0 1 0"/>
    </joint>

    <!--**************************************************************-->
    <!--RIGHT WHEEL-->
    <!--**************************************************************-->
    <link name="right_wheel_link">
      <!--INERTIA-->
      <xacro:cylinder_inertia m="${wheel_mass}" r="${wheel_radius}" h="${wheel_height}"/>
      <!--COLLISION-->
      <collision>
        <geometry>
          <mesh filename="package://rastreator_description/mesh/rastreator_right_wheel.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>
      <!--VISUAL-->
      <visual>
        <geometry>
          <mesh filename="package://rastreator_description/mesh/rastreator_right_wheel.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="black"/>
      </visual>
    </link>
    <!--JOINT-->
    <joint name='wheel_right_joint' type='continuous'>
      <origin xyz="-${wheel_x_pos} -${(wheel_separation/2)+wheel_right_offset} ${wheel_radius-caster_height-plate_height}" rpy="0 0 0"/>
      <child  link="right_wheel_link"/>
      <parent link="base_link"/>
      <axis rpy="0 0 0" xyz="0 1 0"/>
    </joint>

    <!--**************************************************************-->
    <!--CASTER WHEEL (NOT VISUAL)-->
    <!--**************************************************************-->
    <link name="caster_front_link">
      <!--INERTIA-->
      <!--Not calling macro, just small values-->
      <inertial>
        <mass value="0.005"/>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
      </inertial>
      <!--COLLISION-->
      <collision>
        <geometry>
          <mesh filename="package://rastreator_description/mesh/caster_wheel.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>
      <!--VISUAL-->
      <visual>
        <geometry>
          <mesh filename="package://rastreator_description/mesh/caster_wheel.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="black"/>
      </visual>
    </link>
    <!--JOINT-->
    <joint name="caster_front_joint" type="fixed">
      <parent link="base_link"/>
      <child link="caster_front_link"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint>

    <!--**************************************************************-->
    <!--LASER/LIDAR-->
    <!--**************************************************************-->
    <link name="sensor_laser">
      <!--INERTIA-->
      <inertial>
        <inertia ixx="0"  ixy="0"  ixz="0" iyy="0" iyz="0" izz="0" />
        <mass value="0.1"/>
      </inertial>
      <!--COLLISION-->
      <collision>
        <geometry>
          <mesh filename="package://rastreator_description/mesh/rplidar_a3.stl" scale="0.001 0.001 0.001"/>
        </geometry>
      </collision>
      <gravity>false</gravity>
      <!--VISUAL-->
      <visual>
        <geometry>
          <mesh filename="package://rastreator_description/mesh/rplidar_a3.stl" scale="0.001 0.001 0.001"/>
        </geometry>
        <material name="dark"/>
      </visual>
    </link>
    <!--JOINT-->
    <joint name="sensor_laser_joint" type="fixed">
        <origin rpy="0 0.0 0" xyz="0.0 0.0 ${base_height+0.005}"/>
        <child  link="sensor_laser"/>
        <parent link="base_link"/>
    </joint>

    <!--**************************************************************-->
    <!--IMU-->
    <!--**************************************************************--> 
    <link name="imu_link">
        <!--COLLISION-->
        <collision>
          <geometry>
            <mesh filename="package://rastreator_description/mesh/imu.stl" scale="0.001 0.001 0.001"/>
          </geometry>
        </collision>
        <gravity>false</gravity>
        <!--VISUAL-->
        <visual>
          <geometry>
            <mesh filename="package://rastreator_description/mesh/imu.stl" scale="0.001 0.001 0.001"/>
          </geometry>
          <material name="dark"/>
        </visual>
        <!--
        <sensor name="rastreator_imu" type="imu">
          <always_on>true</always_on>
          <update_rate>${update_rate}</update_rate>
          <plugin name="imu" filename="libgazebo_ros_imu_sensor.so">
            <ros>
              <namespace>/sim</namespace>
              <argument>~/out:=imu_sim</argument>
            </ros>
          </plugin>
        </sensor>
        -->
    </link>
    <!--JOINT-->
    <joint name="sensor_imu_joint" type="fixed">
        <origin rpy="0 0.0 0" xyz="0.0 0.0 0"/>
        <child  link="imu_link"/>
        <parent link="base_link"/>
    </joint>

    <!--**************************************************************-->
    <!--                    GAZEBO                                    -->
    <!--**************************************************************--> 

    <gazebo reference="base_link">
      <material>Gazebo/DarkGrey</material>
    </gazebo>

    <gazebo reference="left_wheel_link">
      <material>Gazebo/FlatBlack</material>
      <mu1>0.9</mu1>
      <mu2>0.9</mu2>
      <kp>500000.0</kp>
      <kd>10.0</kd>
      <minDepth>0.001</minDepth>
      <maxVel>0.1</maxVel>
      <fdir1>1 0 0</fdir1>
    </gazebo>

    <gazebo reference="right_wheel_link">
      <material>Gazebo/FlatBlack</material>
      <mu1>0.9</mu1>
      <mu2>0.9</mu2>
      <kp>500000.0</kp>
      <kd>10.0</kd>
      <minDepth>0.001</minDepth>
      <maxVel>0.1</maxVel>
      <fdir1>1 0 0</fdir1>
    </gazebo>

    <gazebo reference="caster_front_link">
      <material>Gazebo/FlatBlack</material>
      <mu1>0.1</mu1>
      <mu2>0.1</mu2>
      <kp>1000000.0</kp>
      <kd>100.0</kd>
      <minDepth>0.001</minDepth>
      <maxVel>1.0</maxVel>
    </gazebo>

    <gazebo reference="sensor_laser">
      <material>Gazebo/FlatBlack</material>
    </gazebo>

    <gazebo reference="imu_link">
      <material>Gazebo/FlatBlack</material>
    </gazebo>


    <!--======= GAZEBO PLUGINS ===========-->

    <gazebo>
      <!--JOINT_STATES-->
      <plugin name="plugin_joint_state" filename="libgazebo_ros_joint_state_publisher.so">
      <ros>
          <!--<namespace>/sim</namespace>-->
          <argument>--ros-args --remap ~/out:=joint_states</argument>
      </ros>
      <update_rate>${update_rate}</update_rate>
      <joint_name>wheel_left_joint</joint_name>
      <joint_name>wheel_right_joint</joint_name>
      </plugin> 
      <!--DIFFERENTIAL DRIVE-->
      <plugin name='plugin_diff_drive' filename='libgazebo_ros_diff_drive.so'>
      <ros>
          <!--<namespace>/sim</namespace>
          <argument>ros-args remap cmd_vel:=/sim/cmd_vel</argument>
          <argument>ros-args remap odom:=/sim/odom</argument>
          -->
      </ros>
      <update_rate>${update_rate}</update_rate>
      <left_joint>wheel_left_joint</left_joint>
      <right_joint>wheel_right_joint</right_joint>
      <wheel_separation>${wheel_separation}</wheel_separation>
      <wheel_diameter>${wheel_diameter}</wheel_diameter>
      <max_wheel_torque>${wheel_torque}</max_wheel_torque>
      <max_wheel_acceleration>${wheel_acc}</max_wheel_acceleration>
      <command_topic>cmd_vel</command_topic>
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>
      <odometry_topic>odom</odometry_topic>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_footprint</robot_base_frame>
      </plugin>

      <plugin name="gazebo_ros_p3d" filename="libgazebo_ros_p3d.so">
        <ros>
          <!-- Add namespace and remap the default topic 
          <namespace>/sim</namespace>
          <argument>odom:=p3d_demo</argument>
          -->
        </ros>

        <!-- Replace camelCase elements with camel_case ones -->
        <body_name>base_footprint</body_name>
        <frame_name>base_footprint</frame_name>
        <update_rate>${update_rate}</update_rate>
        <xyz_offsets>0 0 0</xyz_offsets>
        <rpy_offsets>0 0 0</rpy_offsets>
        <gaussian_noise>0</gaussian_noise>
      </plugin>

    </gazebo>

</robot>